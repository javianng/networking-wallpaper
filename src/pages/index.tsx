import Head from "next/head";
import { useState } from "react";
import { toJpeg } from "html-to-image";
import { Input } from "~/components/ui/input";
import { Button } from "~/components/ui/button";
import { Textarea } from "~/components/ui/textarea";
import { Separator } from "~/components/ui/separator";
import { type PhoneDimensions, phoneModels } from "~/data/PhoneModel";
import { Mail, SendHorizonal, Smartphone } from "lucide-react";
import QRCode from "react-qr-code";

type FormData = {
  linkedin: string;
  github: string;
  telegram: string;
  phone: string;
  email: string;
  fullName: string;
  positions: { jobTitle: string; company: string }[];
  additionalInfo: string;
};

interface HomeProps {
  onSubmit: (data: FormData) => void;
}

export default function Home({ onSubmit }: HomeProps) {
  const [formData, setFormData] = useState<FormData>({
    linkedin: "",
    github: "",
    telegram: "",
    phone: "",
    email: "",
    fullName: "",
    positions: [{ jobTitle: "", company: "" }],
    additionalInfo: "",
  });

  const [dimensions, setDimensions] = useState<PhoneDimensions>(
    phoneModels.iPhone13 ?? { width: 0, height: 0 },
  );
  const [selectedModel, setSelectedModel] = useState<string>("iPhone13");

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,
    index?: number,
    field?: string,
  ) => {
    if (typeof index === "number" && field) {
      const updatedPositions = formData.positions.map((position, idx) =>
        idx === index ? { ...position, [field]: e.target.value } : position,
      );
      setFormData({
        ...formData,
        positions: updatedPositions,
      });
    } else {
      setFormData({
        ...formData,
        [e.target.name]: e.target.value,
      });
    }
  };

  const removePosition = (index: number) => {
    // Remove the position at the given index
    const updatedPositions = formData.positions.filter(
      (_, idx) => idx !== index,
    );
    setFormData({
      ...formData,
      positions: updatedPositions,
    });
  };

  const addPosition = () => {
    // Add a new position with empty job title and company
    const newPositions = [...formData.positions, { jobTitle: "", company: "" }];
    setFormData({
      ...formData,
      positions: newPositions,
    });
  };

  const handleModelChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const model = e.target.value;
    setSelectedModel(model);
    setDimensions(phoneModels[model] ?? { width: 0, height: 0 });
  };

  const handleGenerateWallpaper = () => {
    const element = document.getElementById("capture"); // The ID of the element you want to capture
    if (element) {
      toJpeg(element, {
        quality: 0.95, // Adjust the quality of the image
        pixelRatio: window.devicePixelRatio, // Consider the device pixel ratio
      })
        .then((dataUrl) => {
          const link = document.createElement("a");
          link.href = dataUrl;
          link.download = "networking-lock-screen.jpg"; // Set the download filename
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
        })
        .catch((error) => {
          console.error("Could not generate image", error);
        });
    } else {
      console.error("Element not found");
    }
  };

  return (
    <>
      <Head>
        <title>Networking Lock Screen</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="max-w-7xl bg-neutral-100 p-12">
        <form className="flex flex-col gap-3">
          <h1 className="pb-12 text-5xl font-semibold">
            Networking Lock Screen Generator
          </h1>
          <div className="grid grid-cols-2 gap-3">
            <section className="flex flex-col justify-start gap-3">
              <div className="flex items-center gap-2">
                <p className="pl-1 text-sm font-extralight">Phone Model: </p>
                <select
                  value={selectedModel}
                  onChange={handleModelChange}
                  className="dropdown rounded-md border px-2 py-3 text-sm"
                >
                  {Object.keys(phoneModels).map((model) => (
                    <option key={model} value={model}>
                      {model}
                    </option>
                  ))}
                </select>
              </div>
              <Input
                type="text"
                name="fullName"
                placeholder="Full Name"
                onChange={handleChange}
              />
              <Input
                type="text"
                name="phone"
                placeholder="Phone Number"
                onChange={handleChange}
              />
              <Input
                type="email"
                name="email"
                placeholder="Email"
                onChange={handleChange}
              />
              <Input
                type="text"
                name="telegram"
                placeholder="Telegram Handle"
                onChange={handleChange}
              />
              <Input
                type="text"
                name="linkedin"
                placeholder="LinkedIn URL"
                onChange={handleChange}
              />
              <Input
                type="text"
                name="github"
                placeholder="GitHub URL"
                onChange={handleChange}
              />
              <Textarea
                name="additionalInfo"
                placeholder="Additional Information"
                value={formData.additionalInfo}
                onChange={(e) => handleChange(e)}
              />
              {formData.positions.map((position, index) => (
                <div key={index} className="flex items-center gap-2">
                  <Input
                    type="text"
                    name="jobTitle"
                    placeholder="Job Title"
                    value={position.jobTitle}
                    onChange={(e) => handleChange(e, index, "jobTitle")}
                  />
                  <Input
                    type="text"
                    name="company"
                    placeholder="Company"
                    value={position.company}
                    onChange={(e) => handleChange(e, index, "company")}
                  />
                  {formData.positions.length > 1 && (
                    <Button
                      type="button"
                      variant="destructive"
                      onClick={() => removePosition(index)}
                      className="remove-button"
                    >
                      Remove
                    </Button>
                  )}
                </div>
              ))}
              <Button
                type="button"
                onClick={addPosition}
                className="add-button"
              >
                Add Job
              </Button>
            </section>
            <aside className="flex justify-center">
              <div
                id="capture"
                className="flex flex-col justify-between rounded-lg border border-black bg-white p-3"
                style={{
                  width: `${dimensions.width}px`,
                  height: `${dimensions.height}px`,
                }}
              >
                <div className="h-[27%] bg-slate-400"></div>
                <div className="flex flex-col gap-1">
                  <h1 className="text-xl font-extralight">
                    Hello, I am {formData.fullName}
                  </h1>
                  {formData.positions.map((position, index) => (
                    <h2 key={index} className="text-xl font-extralight">
                      {position.jobTitle} @ {position.company}
                    </h2>
                  ))}
                  <Separator className="my-4" />
                  <div className="flex items-center gap-2">
                    <Smartphone className="h-6 w-6 text-neutral-500" />
                    <p className="text-xl font-extralight">{formData.phone}</p>
                  </div>
                  <div className="flex items-center gap-2">
                    <SendHorizonal className="h-6 w-6 text-neutral-500" />
                    <p className="text-xl font-extralight">
                      @{formData.telegram}
                    </p>
                  </div>
                  <div className="flex items-center gap-2">
                    <Mail className="h-6 w-6 text-neutral-500" />
                    <p className="text-xl font-extralight">{formData.email}</p>
                  </div>
                  <Separator className="my-4" />
                  <div className="flex">
                    {formData.additionalInfo && (
                      <p
                        className="w-1/2 text-xl font-extralight"
                        style={{ whiteSpace: "pre-line" }}
                      >
                        {formData.additionalInfo}
                      </p>
                    )}
                    <div className="flex w-1/2 flex-col gap-2">
                      <p className="text-xl font-extralight">LinkedIn</p>
                      <QRCode
                        value={formData.linkedin}
                        className="flex h-fit w-full border-2 p-4"
                      />
                    </div>
                  </div>
                </div>
                <div className="h-[11%] bg-slate-400"></div>
              </div>
            </aside>
          </div>
          <Button
            type="button"
            onClick={handleGenerateWallpaper}
            className="btn-submit"
          >
            Generate Wallpaper
          </Button>
        </form>
      </main>
    </>
  );
}
